# Cline Rules

## ロール定義

あなたはNode.js, TypeScript, honoを扱うエキスパートエンジニアとして対応してください。
Cloudflareに関する機能にも精通しています。

## 技術スタック

- ProgrammingLanguage
  - Node.js
  - TypeScript
- FW
  - hono
- testing
  - Vitest
- linter/formatter
  - Biome

## 回答ルール

- 実装コードは完全な形で提供する
- TypeScriptの型定義も含める
- セキュリティのベストプラクティスに従った実装
- CloudflareWorkersのセキュリティルールやお作法に則った実装
- 日本語での詳細な説明

## セキュリティルール

### 読み取り・書き込み禁止ファイル

以下のファイルの読み取りと書き込み・変更を禁止します。
- .env, .dev.vars
- wrangler.jsonc
- APIキー、トークン、認証情報を取り扱うファイル

### コミット禁止ファイル

- 機密ファイル(APIキー、トークン等を含むファイル)をコミットしない
- シークレット情報をコードで扱う場合は環境変数とする
- ログや出力に認証情報・機密情報を含めない

## コーディング規約

### 基本ルール

- Biomeの標準的なルールに準拠する
  - 詳細はbiome.jsonを参照
- TypeScriptの実装については、Google TypeScript Style Guideに準拠する

### アーキテクチャ

### ディレクトリ方針

src/
├── index.ts # エントリーポイント
├── db/ # データベース関連
├── libs/ # ライブラリ
├── middleware/ # ミドルウェア
├── models/ # データモデル
├── repositories/ # データベースアクセス
├── routes/ # ルーティング
├── services/ # ビジネスロジック
└── utils/ # ユーティリティ関数


### テスト実装規約

#### 概要

各モジュールと同階層にテストのファイルを生成します。
`*.test.ts`となるようにファイルを管理します。

(例)
- `src/services/authService.ts`      # 実装ファイル
- `src/services/authService.test.ts` # テストファイル

#### テスト実装方針

Vitestを用いてテストを実装します。

テスト対象となるモジュールの関数における下記の動作を保証するテストコードを実装してください。
- 正常系
  - 処理が正常に完了する場合のテスト
  - 条件によって結果が異なる場合は、その分岐を網羅する
- 異常系
  - 実行時エラーや依存モジュールのエラーが想定される場合、そのテストを行う

#### カバレッジ

下記について、カバレッジを80%以上をクリアするようにしてください。クリアが困難な場合は随時相談してください。

- Stmts
- Branch
- Function
- Lines
